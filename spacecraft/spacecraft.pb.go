// Code generated by protoc-gen-go.
// source: spacecraft.proto
// DO NOT EDIT!

/*
Package spacecraft is a generated protocol buffer package.

It is generated from these files:
	spacecraft.proto

It has these top-level messages:
	Testfunc1Params
	Testfunc1Result
*/
package spacecraft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// The request message containing the user's name.
type Testfunc1Params struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Pass string `protobuf:"bytes,3,opt,name=pass" json:"pass,omitempty"`
}

func (m *Testfunc1Params) Reset()                    { *m = Testfunc1Params{} }
func (m *Testfunc1Params) String() string            { return proto.CompactTextString(m) }
func (*Testfunc1Params) ProtoMessage()               {}
func (*Testfunc1Params) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The response message containing the greetings
type Testfunc1Result struct {
	RId   string `protobuf:"bytes,1,opt,name=r_id" json:"r_id,omitempty"`
	RName string `protobuf:"bytes,2,opt,name=r_name" json:"r_name,omitempty"`
	RPass string `protobuf:"bytes,3,opt,name=r_pass" json:"r_pass,omitempty"`
}

func (m *Testfunc1Result) Reset()                    { *m = Testfunc1Result{} }
func (m *Testfunc1Result) String() string            { return proto.CompactTextString(m) }
func (*Testfunc1Result) ProtoMessage()               {}
func (*Testfunc1Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Testfunc1Params)(nil), "spacecraft.testfunc1Params")
	proto.RegisterType((*Testfunc1Result)(nil), "spacecraft.testfunc1Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Base service

type BaseClient interface {
	// Sends a greeting
	Testfunc1(ctx context.Context, in *Testfunc1Params, opts ...grpc.CallOption) (*Testfunc1Result, error)
}

type baseClient struct {
	cc *grpc.ClientConn
}

func NewBaseClient(cc *grpc.ClientConn) BaseClient {
	return &baseClient{cc}
}

func (c *baseClient) Testfunc1(ctx context.Context, in *Testfunc1Params, opts ...grpc.CallOption) (*Testfunc1Result, error) {
	out := new(Testfunc1Result)
	err := grpc.Invoke(ctx, "/spacecraft.base/testfunc1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Base service

type BaseServer interface {
	// Sends a greeting
	Testfunc1(context.Context, *Testfunc1Params) (*Testfunc1Result, error)
}

func RegisterBaseServer(s *grpc.Server, srv BaseServer) {
	s.RegisterService(&_Base_serviceDesc, srv)
}

func _Base_Testfunc1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Testfunc1Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BaseServer).Testfunc1(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Base_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spacecraft.base",
	HandlerType: (*BaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "testfunc1",
			Handler:    _Base_Testfunc1_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0xcb, 0x0a, 0x82, 0x50,
	0x10, 0x86, 0xf3, 0x0a, 0xce, 0xa2, 0xcb, 0x40, 0x20, 0xb5, 0x09, 0x57, 0xad, 0x84, 0xea, 0x21,
	0xc2, 0x4d, 0x89, 0x2f, 0x20, 0x47, 0x3d, 0x42, 0x90, 0x17, 0x66, 0x8e, 0xef, 0x9f, 0x1e, 0xc1,
	0x0e, 0xd1, 0xee, 0x9f, 0x6f, 0xe0, 0xe3, 0x9f, 0x81, 0x2d, 0xf7, 0xa2, 0x94, 0x25, 0x89, 0x5a,
	0xc5, 0x3d, 0x75, 0xaa, 0x43, 0xf8, 0x92, 0x28, 0x81, 0x8d, 0x92, 0xac, 0xea, 0xa1, 0x2d, 0x2f,
	0xa9, 0x20, 0xd1, 0x30, 0xae, 0xc1, 0x7e, 0x55, 0xa1, 0x75, 0xb2, 0xce, 0x41, 0x36, 0x26, 0x44,
	0x70, 0x5b, 0xd1, 0xc8, 0xd0, 0xd6, 0x44, 0xe7, 0x89, 0xf5, 0x82, 0x39, 0x74, 0x66, 0x36, 0xe5,
	0x28, 0x33, 0x54, 0x99, 0xe4, 0xe1, 0xad, 0x70, 0x07, 0x2e, 0xe5, 0x8b, 0xcc, 0xa1, 0xa4, 0xc2,
	0x3d, 0xf8, 0x94, 0x1b, 0x3e, 0x8f, 0x1e, 0x93, 0x50, 0x63, 0x43, 0xe9, 0x51, 0x3a, 0x0e, 0xd7,
	0x27, 0xb8, 0x85, 0x60, 0x89, 0x77, 0x08, 0x16, 0x37, 0x1e, 0x63, 0xe3, 0xa4, 0x9f, 0xf6, 0x87,
	0xff, 0xcb, 0xb9, 0x4f, 0xb4, 0x2a, 0x7c, 0xfd, 0x82, 0xdb, 0x27, 0x00, 0x00, 0xff, 0xff, 0x28,
	0xe8, 0xcd, 0x85, 0x16, 0x01, 0x00, 0x00,
}
