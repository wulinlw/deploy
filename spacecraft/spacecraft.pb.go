// Code generated by protoc-gen-go.
// source: spacecraft.proto
// DO NOT EDIT!

/*
Package spacecraft is a generated protocol buffer package.

It is generated from these files:
	spacecraft.proto

It has these top-level messages:
	SvnUpParam
	VersionNum
	SvnCheckoutParams
	SvnUpToRevisionParams
	ResponseStr
	SpecifiedCommandParams
	SendFileParams
*/
package spacecraft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// svnUp params
type SvnUpParam struct {
	Dir string `protobuf:"bytes,1,opt,name=dir" json:"dir,omitempty"`
}

func (m *SvnUpParam) Reset()                    { *m = SvnUpParam{} }
func (m *SvnUpParam) String() string            { return proto.CompactTextString(m) }
func (*SvnUpParam) ProtoMessage()               {}
func (*SvnUpParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// svnUp response
type VersionNum struct {
	Version int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
}

func (m *VersionNum) Reset()                    { *m = VersionNum{} }
func (m *VersionNum) String() string            { return proto.CompactTextString(m) }
func (*VersionNum) ProtoMessage()               {}
func (*VersionNum) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// svnCheckout params
type SvnCheckoutParams struct {
	SvnUrl string `protobuf:"bytes,1,opt,name=svnUrl" json:"svnUrl,omitempty"`
	Dir    string `protobuf:"bytes,2,opt,name=dir" json:"dir,omitempty"`
}

func (m *SvnCheckoutParams) Reset()                    { *m = SvnCheckoutParams{} }
func (m *SvnCheckoutParams) String() string            { return proto.CompactTextString(m) }
func (*SvnCheckoutParams) ProtoMessage()               {}
func (*SvnCheckoutParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// svnUpToRevision params
type SvnUpToRevisionParams struct {
	Dir     string `protobuf:"bytes,1,opt,name=dir" json:"dir,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *SvnUpToRevisionParams) Reset()                    { *m = SvnUpToRevisionParams{} }
func (m *SvnUpToRevisionParams) String() string            { return proto.CompactTextString(m) }
func (*SvnUpToRevisionParams) ProtoMessage()               {}
func (*SvnUpToRevisionParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ResponseStr struct {
	String_ string `protobuf:"bytes,1,opt,name=string" json:"string,omitempty"`
}

func (m *ResponseStr) Reset()                    { *m = ResponseStr{} }
func (m *ResponseStr) String() string            { return proto.CompactTextString(m) }
func (*ResponseStr) ProtoMessage()               {}
func (*ResponseStr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// specifiedCommand params
type SpecifiedCommandParams struct {
	Command string `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	Dir     string `protobuf:"bytes,2,opt,name=dir" json:"dir,omitempty"`
}

func (m *SpecifiedCommandParams) Reset()                    { *m = SpecifiedCommandParams{} }
func (m *SpecifiedCommandParams) String() string            { return proto.CompactTextString(m) }
func (*SpecifiedCommandParams) ProtoMessage()               {}
func (*SpecifiedCommandParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// sendFile params
type SendFileParams struct {
	FileAbsolutePath string `protobuf:"bytes,1,opt,name=fileAbsolutePath" json:"fileAbsolutePath,omitempty"`
	FileContent      []byte `protobuf:"bytes,2,opt,name=fileContent,proto3" json:"fileContent,omitempty"`
	StoragePath      string `protobuf:"bytes,3,opt,name=storagePath" json:"storagePath,omitempty"`
}

func (m *SendFileParams) Reset()                    { *m = SendFileParams{} }
func (m *SendFileParams) String() string            { return proto.CompactTextString(m) }
func (*SendFileParams) ProtoMessage()               {}
func (*SendFileParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*SvnUpParam)(nil), "spacecraft.SvnUpParam")
	proto.RegisterType((*VersionNum)(nil), "spacecraft.VersionNum")
	proto.RegisterType((*SvnCheckoutParams)(nil), "spacecraft.SvnCheckoutParams")
	proto.RegisterType((*SvnUpToRevisionParams)(nil), "spacecraft.SvnUpToRevisionParams")
	proto.RegisterType((*ResponseStr)(nil), "spacecraft.ResponseStr")
	proto.RegisterType((*SpecifiedCommandParams)(nil), "spacecraft.SpecifiedCommandParams")
	proto.RegisterType((*SendFileParams)(nil), "spacecraft.sendFileParams")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Spacecraft service

type SpacecraftClient interface {
	SvnUp(ctx context.Context, in *SvnUpParam, opts ...grpc.CallOption) (*VersionNum, error)
	SvnCheckout(ctx context.Context, in *SvnCheckoutParams, opts ...grpc.CallOption) (*VersionNum, error)
	SvnUpToRevision(ctx context.Context, in *SvnUpToRevisionParams, opts ...grpc.CallOption) (*VersionNum, error)
	SvnInfo(ctx context.Context, in *SvnUpParam, opts ...grpc.CallOption) (*ResponseStr, error)
	SpecifiedCommand(ctx context.Context, in *SpecifiedCommandParams, opts ...grpc.CallOption) (*ResponseStr, error)
	ComplexCommand(ctx context.Context, in *SpecifiedCommandParams, opts ...grpc.CallOption) (*ResponseStr, error)
	SendFile(ctx context.Context, in *SendFileParams, opts ...grpc.CallOption) (*ResponseStr, error)
	GetFileList(ctx context.Context, in *SvnUpParam, opts ...grpc.CallOption) (*ResponseStr, error)
}

type spacecraftClient struct {
	cc *grpc.ClientConn
}

func NewSpacecraftClient(cc *grpc.ClientConn) SpacecraftClient {
	return &spacecraftClient{cc}
}

func (c *spacecraftClient) SvnUp(ctx context.Context, in *SvnUpParam, opts ...grpc.CallOption) (*VersionNum, error) {
	out := new(VersionNum)
	err := grpc.Invoke(ctx, "/spacecraft.Spacecraft/svnUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacecraftClient) SvnCheckout(ctx context.Context, in *SvnCheckoutParams, opts ...grpc.CallOption) (*VersionNum, error) {
	out := new(VersionNum)
	err := grpc.Invoke(ctx, "/spacecraft.Spacecraft/svnCheckout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacecraftClient) SvnUpToRevision(ctx context.Context, in *SvnUpToRevisionParams, opts ...grpc.CallOption) (*VersionNum, error) {
	out := new(VersionNum)
	err := grpc.Invoke(ctx, "/spacecraft.Spacecraft/svnUpToRevision", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacecraftClient) SvnInfo(ctx context.Context, in *SvnUpParam, opts ...grpc.CallOption) (*ResponseStr, error) {
	out := new(ResponseStr)
	err := grpc.Invoke(ctx, "/spacecraft.Spacecraft/svnInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacecraftClient) SpecifiedCommand(ctx context.Context, in *SpecifiedCommandParams, opts ...grpc.CallOption) (*ResponseStr, error) {
	out := new(ResponseStr)
	err := grpc.Invoke(ctx, "/spacecraft.Spacecraft/specifiedCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacecraftClient) ComplexCommand(ctx context.Context, in *SpecifiedCommandParams, opts ...grpc.CallOption) (*ResponseStr, error) {
	out := new(ResponseStr)
	err := grpc.Invoke(ctx, "/spacecraft.Spacecraft/complexCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacecraftClient) SendFile(ctx context.Context, in *SendFileParams, opts ...grpc.CallOption) (*ResponseStr, error) {
	out := new(ResponseStr)
	err := grpc.Invoke(ctx, "/spacecraft.Spacecraft/sendFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacecraftClient) GetFileList(ctx context.Context, in *SvnUpParam, opts ...grpc.CallOption) (*ResponseStr, error) {
	out := new(ResponseStr)
	err := grpc.Invoke(ctx, "/spacecraft.Spacecraft/getFileList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Spacecraft service

type SpacecraftServer interface {
	SvnUp(context.Context, *SvnUpParam) (*VersionNum, error)
	SvnCheckout(context.Context, *SvnCheckoutParams) (*VersionNum, error)
	SvnUpToRevision(context.Context, *SvnUpToRevisionParams) (*VersionNum, error)
	SvnInfo(context.Context, *SvnUpParam) (*ResponseStr, error)
	SpecifiedCommand(context.Context, *SpecifiedCommandParams) (*ResponseStr, error)
	ComplexCommand(context.Context, *SpecifiedCommandParams) (*ResponseStr, error)
	SendFile(context.Context, *SendFileParams) (*ResponseStr, error)
	GetFileList(context.Context, *SvnUpParam) (*ResponseStr, error)
}

func RegisterSpacecraftServer(s *grpc.Server, srv SpacecraftServer) {
	s.RegisterService(&_Spacecraft_serviceDesc, srv)
}

func _Spacecraft_SvnUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SvnUpParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SpacecraftServer).SvnUp(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Spacecraft_SvnCheckout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SvnCheckoutParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SpacecraftServer).SvnCheckout(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Spacecraft_SvnUpToRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SvnUpToRevisionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SpacecraftServer).SvnUpToRevision(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Spacecraft_SvnInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SvnUpParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SpacecraftServer).SvnInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Spacecraft_SpecifiedCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SpecifiedCommandParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SpacecraftServer).SpecifiedCommand(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Spacecraft_ComplexCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SpecifiedCommandParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SpacecraftServer).ComplexCommand(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Spacecraft_SendFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SendFileParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SpacecraftServer).SendFile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Spacecraft_GetFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SvnUpParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SpacecraftServer).GetFileList(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Spacecraft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spacecraft.Spacecraft",
	HandlerType: (*SpacecraftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "svnUp",
			Handler:    _Spacecraft_SvnUp_Handler,
		},
		{
			MethodName: "svnCheckout",
			Handler:    _Spacecraft_SvnCheckout_Handler,
		},
		{
			MethodName: "svnUpToRevision",
			Handler:    _Spacecraft_SvnUpToRevision_Handler,
		},
		{
			MethodName: "svnInfo",
			Handler:    _Spacecraft_SvnInfo_Handler,
		},
		{
			MethodName: "specifiedCommand",
			Handler:    _Spacecraft_SpecifiedCommand_Handler,
		},
		{
			MethodName: "complexCommand",
			Handler:    _Spacecraft_ComplexCommand_Handler,
		},
		{
			MethodName: "sendFile",
			Handler:    _Spacecraft_SendFile_Handler,
		},
		{
			MethodName: "getFileList",
			Handler:    _Spacecraft_GetFileList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x94, 0xc1, 0x4f, 0xe2, 0x40,
	0x14, 0xc6, 0x17, 0x58, 0x60, 0xf7, 0xb1, 0x61, 0x71, 0x12, 0x91, 0x90, 0x68, 0xb0, 0x89, 0xc6,
	0x78, 0xe0, 0xa0, 0x27, 0x13, 0x4d, 0x24, 0x35, 0x24, 0x26, 0x06, 0xb5, 0xa8, 0xf7, 0xd2, 0x4e,
	0x61, 0x62, 0x3b, 0xd3, 0xcc, 0x0c, 0xc4, 0xa3, 0x7f, 0x9d, 0x7f, 0x97, 0xd3, 0xa1, 0xa5, 0x2d,
	0x60, 0x0f, 0xc6, 0x1b, 0xef, 0xcb, 0x7b, 0xbf, 0xf7, 0x31, 0xdf, 0x4b, 0xa1, 0x25, 0x42, 0xdb,
	0xc1, 0x0e, 0xb7, 0x3d, 0xd9, 0x0f, 0x39, 0x93, 0x0c, 0x41, 0xaa, 0x18, 0x07, 0x00, 0xe3, 0x05,
	0x7d, 0x0e, 0x1f, 0x6c, 0x6e, 0x07, 0xa8, 0x05, 0x15, 0x97, 0xf0, 0x4e, 0xa9, 0x57, 0x3a, 0xf9,
	0x6b, 0x45, 0x3f, 0x8d, 0x63, 0x80, 0x17, 0xcc, 0x05, 0x61, 0x74, 0x34, 0x0f, 0x50, 0x07, 0xea,
	0x8b, 0x65, 0xa5, 0x7b, 0xaa, 0x56, 0x52, 0x1a, 0x57, 0xb0, 0xa3, 0x38, 0xe6, 0x0c, 0x3b, 0xaf,
	0x6c, 0x2e, 0x35, 0x4d, 0xa0, 0x36, 0xd4, 0x84, 0x82, 0x73, 0x3f, 0x26, 0xc6, 0x55, 0xb2, 0xa6,
	0x9c, 0xae, 0x31, 0x61, 0x57, 0xdb, 0x78, 0x62, 0x16, 0x5e, 0x90, 0x88, 0x18, 0x23, 0x36, 0x1c,
	0x65, 0x3d, 0x94, 0xf3, 0x1e, 0x8e, 0xa0, 0x61, 0x61, 0x11, 0x32, 0x2a, 0xf0, 0x58, 0x72, 0xbd,
	0x5d, 0x72, 0x42, 0xa7, 0xab, 0xed, 0xba, 0x32, 0x6e, 0xa0, 0x3d, 0x0e, 0xb1, 0x43, 0x3c, 0x82,
	0x5d, 0x93, 0x05, 0x81, 0x4d, 0xdd, 0x78, 0x99, 0x42, 0x3b, 0x4b, 0x21, 0x1e, 0x49, 0xca, 0x2d,
	0x8e, 0xdf, 0x4b, 0xd0, 0x14, 0x98, 0xba, 0x43, 0xe2, 0xe3, 0x78, 0xfc, 0x14, 0x5a, 0x9e, 0xaa,
	0x06, 0x13, 0xc1, 0xfc, 0xb9, 0x54, 0xaa, 0x9c, 0xc5, 0x9c, 0x0d, 0x1d, 0xf5, 0xa0, 0x11, 0x69,
	0x26, 0xa3, 0x12, 0x53, 0xa9, 0xc1, 0xff, 0xac, 0xac, 0x14, 0x75, 0x08, 0xc9, 0xb8, 0x3d, 0x5d,
	0x82, 0x2a, 0x1a, 0x94, 0x95, 0xce, 0x3e, 0x7e, 0xab, 0xf0, 0x56, 0x51, 0xa2, 0x0b, 0xa8, 0x46,
	0xef, 0x1b, 0xa2, 0x76, 0x3f, 0x13, 0x79, 0x9a, 0x6e, 0x37, 0xa7, 0xa7, 0xa9, 0x1a, 0xbf, 0xd0,
	0x50, 0xed, 0x4a, 0xd3, 0x43, 0xfb, 0x6b, 0x80, 0x7c, 0xac, 0x05, 0x9c, 0x11, 0xfc, 0x17, 0xf9,
	0x18, 0xd1, 0xe1, 0x86, 0x99, 0xf5, 0x8c, 0x0b, 0x78, 0x97, 0x50, 0x57, 0xbc, 0x5b, 0xea, 0xb1,
	0x2f, 0xff, 0xd4, 0x5e, 0x56, 0xcf, 0xc4, 0xaf, 0xa6, 0x1f, 0xa3, 0xdb, 0xcf, 0x07, 0x8d, 0x8c,
	0x1c, 0x66, 0xeb, 0x19, 0x14, 0x21, 0xef, 0xa1, 0xa9, 0x4e, 0x22, 0xf4, 0xf1, 0xdb, 0x0f, 0x01,
	0x07, 0xf0, 0x27, 0xb9, 0x22, 0xd4, 0xcd, 0xb6, 0xe5, 0x6f, 0xab, 0x08, 0x71, 0x0d, 0x8d, 0x29,
	0x96, 0x51, 0xef, 0x1d, 0x11, 0xf2, 0x1b, 0x0f, 0x35, 0xa9, 0xe9, 0xef, 0xc2, 0xf9, 0x67, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x1f, 0x52, 0x55, 0x28, 0x2b, 0x04, 0x00, 0x00,
}
